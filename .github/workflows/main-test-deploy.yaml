# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Main-test-deploy

on:
  push:
    branches:
      - devel-deploy-pipeline

permissions: write-all

jobs:
  commit-deploy-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

#      - name: Make gradlew executable
#        run: chmod +x ./gradlew
#
#      - name: Build with Gradle
#        uses: gradle/gradle-build-action@v3
#        with:
#          arguments: :user-api-module:build -x test
#
#      - name: Make zip file
#        run: zip -qq -r ./$GITHUB_SHA.zip user-api-module/build/libs/

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib

      - name: Write credentials file
        run: echo "${{ secrets.GOOGLE_DRIVE_API_SERVICE_ACCOUNT_CRED }}" > credentials.json

      - name: cat
        run: cat credentials.json

      - name: Upload file to Google Drive and get file ID
        id: upload_and_get_id
        run: |
          python <<EOF
          from googleapiclient.discovery import build
          from google.oauth2.service_account import Credentials
          from googleapiclient.http import MediaFileUpload
          import json
          
          with open('credentials.json', 'r') as file:
            lines = file.readlines()
          
          for line in lines:
            print(line.strip())  # strip() removes any leading/trailing whitespace
          
          SCOPES = ['https://www.googleapis.com/auth/drive.file']
          FILE_NAME = '$GITHUB_SHA.zip'
          FOLDER_ID = '${{ secrets.GOOGLE_DRIVE_PRODUCT_DEPLOY_FOLDER_ID }}'

          credentials = Credentials.from_service_account_file('credentials.json', scopes=SCOPES)
          service = build('drive', 'v3', credentials=credentials)

          # Upload file
          file_metadata = {'name': FILE_NAME, 'parents': [FOLDER_ID]}
          media = MediaFileUpload(FILE_NAME)
          file = service.files().create(body=file_metadata, media_body=media, fields='id').execute()

          # Output file ID
          print(f"::set-output name=file_id::{file.get('id')}")
          EOF
        env:
          GOOGLE_DRIVE_API_SERVICE_ACCOUNT_CRED: ${{ secrets.GOOGLE_DRIVE_API_SERVICE_ACCOUNT_CRED }}

      - name: Print file ID
        run: |
          echo "File ID: ${{ steps.upload_and_get_id.outputs.file_id }}"
          
          
#      - name: Construct action secrets to env.properties
#        run: |
#          echo "DEV_DB_URL=${{secrets.ENV_DEV_DB_URL}}" >> env.properties
#          echo "DEV_DB_USER=${{secrets.ENV_DEV_DB_USER}}" >> env.properties
#          echo "DEV_DB_PASSWORD=${{secrets.ENV_DEV_DB_PASSWORD}}" >> env.properties
#
#          echo "SECURITY_KEY=${{secrets.ENV_SECURITY_KEY}}" >> env.properties
#          echo "EMAIL_USERNAME=${{secrets.ENV_EMAIL_USERNAME}}" >> env.properties
#          echo "EMAIL_PASSWORD=${{secrets.ENV_EMAIL_PASSWORD}}" >> env.properties
#          echo "SSL_OR_TLS=587" >> env.properties
#
#          echo "DB_HIKARI_MAX_LIFETIME=580000" >> env.properties
#          echo "DB_HIKARI_MAX_POOLSIZE=10" >> env.properties
#          echo "DB_HIKARI_INIT_SQL=set wait_timeout = 600" >> env.properties
#          echo "DB_HIKARI_CONNECTION_TIMEOUT=20000" >> env.properties
#          echo "DB_HIKARI_VALIDATION_TIMEOUT=10000" >> env.properties
#          echo "DB_HIKARI_IDLE_TIMEOUT=300000" >> env.properties
#          echo "DB_HIKARI_MINIMUM_IDLE=5" >> env.properties
#
#          echo "CIPHER_SECRET=${{secrets.ENV_CIPHER_SECRET}}" >> env.properties
#          echo "CIPHER_IV=${{secrets.ENV_CIPHER_IV}}" >> env.properties
#        shell: bash